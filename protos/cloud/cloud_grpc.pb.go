// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: protos/cloud/cloud.proto

package cloud

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Cloud_Save_FullMethodName      = "/poc.protos.cloud.Cloud/Save"
	Cloud_Subscribe_FullMethodName = "/poc.protos.cloud.Cloud/Subscribe"
)

// CloudClient is the client API for Cloud service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// service definition.
type CloudClient interface {
	Save(ctx context.Context, in *CloudObject, opts ...grpc.CallOption) (*OperationResult, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (Cloud_SubscribeClient, error)
}

type cloudClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudClient(cc grpc.ClientConnInterface) CloudClient {
	return &cloudClient{cc}
}

func (c *cloudClient) Save(ctx context.Context, in *CloudObject, opts ...grpc.CallOption) (*OperationResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationResult)
	err := c.cc.Invoke(ctx, Cloud_Save_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (Cloud_SubscribeClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Cloud_ServiceDesc.Streams[0], Cloud_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &cloudSubscribeClient{ClientStream: stream}
	return x, nil
}

type Cloud_SubscribeClient interface {
	Send(*CloudObject) error
	Recv() (*CloudObject, error)
	grpc.ClientStream
}

type cloudSubscribeClient struct {
	grpc.ClientStream
}

func (x *cloudSubscribeClient) Send(m *CloudObject) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cloudSubscribeClient) Recv() (*CloudObject, error) {
	m := new(CloudObject)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CloudServer is the server API for Cloud service.
// All implementations must embed UnimplementedCloudServer
// for forward compatibility
//
// service definition.
type CloudServer interface {
	Save(context.Context, *CloudObject) (*OperationResult, error)
	Subscribe(Cloud_SubscribeServer) error
	mustEmbedUnimplementedCloudServer()
}

// UnimplementedCloudServer must be embedded to have forward compatible implementations.
type UnimplementedCloudServer struct {
}

func (UnimplementedCloudServer) Save(context.Context, *CloudObject) (*OperationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Save not implemented")
}
func (UnimplementedCloudServer) Subscribe(Cloud_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedCloudServer) mustEmbedUnimplementedCloudServer() {}

// UnsafeCloudServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudServer will
// result in compilation errors.
type UnsafeCloudServer interface {
	mustEmbedUnimplementedCloudServer()
}

func RegisterCloudServer(s grpc.ServiceRegistrar, srv CloudServer) {
	s.RegisterService(&Cloud_ServiceDesc, srv)
}

func _Cloud_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudObject)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cloud_Save_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudServer).Save(ctx, req.(*CloudObject))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cloud_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CloudServer).Subscribe(&cloudSubscribeServer{ServerStream: stream})
}

type Cloud_SubscribeServer interface {
	Send(*CloudObject) error
	Recv() (*CloudObject, error)
	grpc.ServerStream
}

type cloudSubscribeServer struct {
	grpc.ServerStream
}

func (x *cloudSubscribeServer) Send(m *CloudObject) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cloudSubscribeServer) Recv() (*CloudObject, error) {
	m := new(CloudObject)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Cloud_ServiceDesc is the grpc.ServiceDesc for Cloud service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cloud_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poc.protos.cloud.Cloud",
	HandlerType: (*CloudServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Save",
			Handler:    _Cloud_Save_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Cloud_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protos/cloud/cloud.proto",
}
