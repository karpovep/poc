// Code generated by MockGen. DO NOT EDIT.
// Source: poc/utils (interfaces: ICancellableTimer)

// Package utils_mock is a generated GoMock package.
package utils_mock

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockICancellableTimer is a mock of ICancellableTimer interface.
type MockICancellableTimer struct {
	ctrl     *gomock.Controller
	recorder *MockICancellableTimerMockRecorder
}

// MockICancellableTimerMockRecorder is the mock recorder for MockICancellableTimer.
type MockICancellableTimerMockRecorder struct {
	mock *MockICancellableTimer
}

// NewMockICancellableTimer creates a new mock instance.
func NewMockICancellableTimer(ctrl *gomock.Controller) *MockICancellableTimer {
	mock := &MockICancellableTimer{ctrl: ctrl}
	mock.recorder = &MockICancellableTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICancellableTimer) EXPECT() *MockICancellableTimerMockRecorder {
	return m.recorder
}

// After mocks base method.
func (m *MockICancellableTimer) After(arg0 time.Duration) chan bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "After", arg0)
	ret0, _ := ret[0].(chan bool)
	return ret0
}

// After indicates an expected call of After.
func (mr *MockICancellableTimerMockRecorder) After(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "After", reflect.TypeOf((*MockICancellableTimer)(nil).After), arg0)
}

// Cancel mocks base method.
func (m *MockICancellableTimer) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockICancellableTimerMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockICancellableTimer)(nil).Cancel))
}
