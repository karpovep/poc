// Code generated by MockGen. DO NOT EDIT.
// Source: poc/bus (interfaces: IEventBus)

// Package bus_mock is a generated GoMock package.
package bus_mock

import (
	bus "poc/bus"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIEventBus is a mock of IEventBus interface.
type MockIEventBus struct {
	ctrl     *gomock.Controller
	recorder *MockIEventBusMockRecorder
}

// MockIEventBusMockRecorder is the mock recorder for MockIEventBus.
type MockIEventBusMockRecorder struct {
	mock *MockIEventBus
}

// NewMockIEventBus creates a new mock instance.
func NewMockIEventBus(ctrl *gomock.Controller) *MockIEventBus {
	mock := &MockIEventBus{ctrl: ctrl}
	mock.recorder = &MockIEventBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEventBus) EXPECT() *MockIEventBusMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockIEventBus) Publish(arg0 string, arg1 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", arg0, arg1)
}

// Publish indicates an expected call of Publish.
func (mr *MockIEventBusMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockIEventBus)(nil).Publish), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockIEventBus) Subscribe(arg0 string, arg1 bus.DataChannel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Subscribe", arg0, arg1)
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockIEventBusMockRecorder) Subscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockIEventBus)(nil).Subscribe), arg0, arg1)
}

// Unsubscribe mocks base method.
func (m *MockIEventBus) Unsubscribe(arg0 string, arg1 bus.DataChannel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0, arg1)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockIEventBusMockRecorder) Unsubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockIEventBus)(nil).Unsubscribe), arg0, arg1)
}
